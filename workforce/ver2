import tkinter as tk
from tkinter import filedialog, simpledialog
import networkx as nx

class NodeEditor(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Tkinter Node Editor")
        self.geometry("1000x800")

        self.G = nx.DiGraph()
        self.scale = 1.0
        self.offset_x = 0
        self.offset_y = 0
        self.drag_data = {"x": 0, "y": 0, "dragging": False, "type": None, "id": None}

        self.create_widgets()
        self.bind_keys()

    def create_widgets(self):
        self.canvas = tk.Canvas(self, bg="white")
        self.canvas.pack(fill=tk.BOTH, expand=True)

        self.canvas.bind("<Button-1>", self.on_left_click)
        self.canvas.bind("<B1-Motion>", self.on_left_drag)
        self.canvas.bind("<ButtonRelease-1>", self.on_left_release)

        self.canvas.bind("<Button-2>", self.on_middle_press)
        self.canvas.bind("<B2-Motion>", self.on_middle_drag)

        self.canvas.bind("<MouseWheel>", self.zoom)
        self.canvas.bind("<Button-4>", self.zoom)  # Linux scroll up
        self.canvas.bind("<Button-5>", self.zoom)  # Linux scroll down

        toolbar = tk.Frame(self)
        toolbar.pack(side=tk.TOP, fill=tk.X)

        tk.Button(toolbar, text="Add Node", command=self.add_node).pack(side=tk.LEFT)
        tk.Button(toolbar, text="Connect", command=self.connect_selected).pack(side=tk.LEFT)
        tk.Button(toolbar, text="Zoom +", command=lambda: self.zoom_fake(1.1)).pack(side=tk.LEFT)
        tk.Button(toolbar, text="Zoom -", command=lambda: self.zoom_fake(0.9)).pack(side=tk.LEFT)
        tk.Button(toolbar, text="Reset View", command=self.reset_view).pack(side=tk.LEFT)

    def bind_keys(self):
        self.bind("+", lambda e: self.zoom_fake(1.1))
        self.bind("-", lambda e: self.zoom_fake(0.9))

    def add_node(self):
        label = simpledialog.askstring("Node", "Enter node label:")
        if not label:
            return
        node_id = f"node{len(self.G.nodes)}"
        x = self.canvas.winfo_width() / 2 / self.scale - self.offset_x
        y = self.canvas.winfo_height() / 2 / self.scale - self.offset_y
        self.G.add_node(node_id, label=label, x=x, y=y)
        self.redraw()

    def connect_selected(self):
        if len(self.canvas.find_withtag("selected")) == 2:
            ids = self.canvas.find_withtag("selected")
            nodes = [self.canvas.gettags(i)[1] for i in ids]
            self.G.add_edge(nodes[0], nodes[1])
            self.redraw()

    def on_left_click(self, event):
        x = self.canvas.canvasx(event.x)
        y = self.canvas.canvasy(event.y)
        items = self.canvas.find_overlapping(x, y, x, y)
        if items:
            item = items[-1]
            tags = self.canvas.gettags(item)
            if "node" in tags:
                self.drag_data.update({"dragging": True, "x": x, "y": y, "type": "node", "id": tags[1]})
                self.canvas.addtag_withtag("selected", item)
        else:
            self.canvas.dtag("all", "selected")

    def on_left_drag(self, event):
        if self.drag_data["dragging"] and self.drag_data["type"] == "node":
            dx = (self.canvas.canvasx(event.x) - self.drag_data["x"]) / self.scale
            dy = (self.canvas.canvasy(event.y) - self.drag_data["y"]) / self.scale
            node = self.drag_data["id"]
            self.G.nodes[node]['x'] += dx
            self.G.nodes[node]['y'] += dy
            self.drag_data["x"] = self.canvas.canvasx(event.x)
            self.drag_data["y"] = self.canvas.canvasy(event.y)
            self.redraw()

    def on_left_release(self, event):
        self.drag_data["dragging"] = False

    def on_middle_press(self, event):
        self.drag_data.update({"dragging": True, "x": event.x, "y": event.y, "type": "pan"})

    def on_middle_drag(self, event):
        if self.drag_data["type"] == "pan":
            dx = (event.x - self.drag_data["x"]) / self.scale
            dy = (event.y - self.drag_data["y"]) / self.scale
            self.offset_x += dx
            self.offset_y += dy
            self.drag_data["x"] = event.x
            self.drag_data["y"] = event.y
            self.redraw()

    def zoom(self, event):
        factor = 1.1 if (event.delta > 0 or event.num == 4) else 0.9
        self.zoom_fake(factor, event.x, event.y)

    def zoom_fake(self, factor, x=None, y=None):
        if x is None: x = self.canvas.winfo_width() / 2
        if y is None: y = self.canvas.winfo_height() / 2
        cx = self.canvas.canvasx(x) / self.scale - self.offset_x
        cy = self.canvas.canvasy(y) / self.scale - self.offset_y

        self.scale *= factor
        self.offset_x = (self.offset_x - cx) * factor + cx
        self.offset_y = (self.offset_y - cy) * factor + cy
        self.redraw()

    def reset_view(self):
        self.scale = 1.0
        self.offset_x = 0
        self.offset_y = 0
        self.redraw()

    def redraw(self):
        self.canvas.delete("all")
        for node_id, data in self.G.nodes(data=True):
            x = (data['x'] + self.offset_x) * self.scale
            y = (data['y'] + self.offset_y) * self.scale
            self.canvas.create_oval(x - 20, y - 20, x + 20, y + 20, fill='lightblue', tags=("node", node_id))
            self.canvas.create_text(x, y, text=data['label'], tags=("label", node_id))

        for source, target in self.G.edges:
            x1 = (self.G.nodes[source]['x'] + self.offset_x) * self.scale
            y1 = (self.G.nodes[source]['y'] + self.offset_y) * self.scale
            x2 = (self.G.nodes[target]['x'] + self.offset_x) * self.scale
            y2 = (self.G.nodes[target]['y'] + self.offset_y) * self.scale
            self.canvas.create_line(x1, y1, x2, y2, arrow=tk.LAST)

if __name__ == "__main__":
    app = NodeEditor()
    app.mainloop()
